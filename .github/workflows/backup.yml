name: Database Backup

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  backup:
    name: Backup Production Database
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1
      
      - name: Backup PostgreSQL database
        env:
          PGPASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE="securesnap_backup_${TIMESTAMP}.sql"
          
          # Create backup
          pg_dump -h ${{ secrets.PROD_DB_HOST }} \
                  -U ${{ secrets.PROD_DB_USER }} \
                  -d ${{ secrets.PROD_DB_NAME }} \
                  -f ${BACKUP_FILE}
          
          # Compress backup
          gzip ${BACKUP_FILE}
          
          # Upload to S3
          aws s3 cp ${BACKUP_FILE}.gz s3://securesnap-backups/database/${BACKUP_FILE}.gz \
            --storage-class GLACIER_IR \
            --server-side-encryption AES256
          
          # Clean up local file
          rm ${BACKUP_FILE}.gz
      
      - name: Verify backup
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE="securesnap_backup_${TIMESTAMP}.sql.gz"
          
          # Check if backup exists in S3
          aws s3 ls s3://securesnap-backups/database/ | grep ${BACKUP_FILE}
      
      - name: Clean up old backups
        run: |
          # Delete backups older than 30 days
          aws s3 ls s3://securesnap-backups/database/ | \
          while read -r line; do
            createDate=$(echo $line | awk '{print $1" "$2}')
            createDate=$(date -d "$createDate" +%s)
            olderThan=$(date -d "30 days ago" +%s)
            if [[ $createDate -lt $olderThan ]]; then
              fileName=$(echo $line | awk '{print $4}')
              if [[ $fileName != "" ]]; then
                aws s3 rm s3://securesnap-backups/database/$fileName
              fi
            fi
          done
      
      - name: Send notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Database backup failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}